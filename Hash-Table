#define _XOPEN_SOURCE 500
#include <stdlib.h>
#include <stdio.h>
#include <limits.h>
#include <string.h>

struct entry_s {
    char *key;
    char *value;
    struct entry_s *next;
};

typedef struct entry_s entry_t;

struct hashtable_s {
    int size;
    struct entry_s **table;
};

typedef struct hashtable_s hashtable_t;

// Create Hashtable
hashtable_t *ht_create( int size ) {
    
    hashtable_t *hashtable = NULL;
    int i;
    
    if( size < 1 ) return NULL;
    
   
    if( ( hashtable = malloc( sizeof( hashtable_t ) ) ) == NULL ) {
        return NULL;
    }
    
    if( ( hashtable->table = malloc( sizeof( entry_t * ) * size ) ) == NULL ) {
        return NULL;
    }

    for( i = 0; i < size; i++ ) {
        hashtable->table[i] = NULL;
    }
    
    hashtable->size = size;
    
    return hashtable;
}

//Create Hash-string for specific hash-table
int ht_hash( hashtable_t *hashtable, char *key ) {
    
    unsigned long int hashval;
    int i = 0;
    
    // Convert our string to an integer
    while( hashval < ULONG_MAX && i < strlen( key ) ) {
        hashval = hashval << 8;
        hashval += key[ i ];
        i++;
    }
    
    return hashval % hashtable->size;
}

// Create the pair of key-value.
entry_t *ht_newpair( char *key, char *value ) {
    entry_t *newpair;
    
    if( ( newpair = malloc( sizeof( entry_t ) ) ) == NULL ) {
        return NULL;
    }
    
    if( ( newpair->key = strdup( key ) ) == NULL ) {
        return NULL;
    }
    
    if( ( newpair->value = strdup( value ) ) == NULL ) {
        return NULL;
    }
    
    newpair->next = NULL;
    
    return newpair;
}

//add the pair of key-value to the hash table
void ht_set( hashtable_t *hashtable, char *key, char *value ) {
    int bin = 0;
    entry_t *newpair = NULL;
    entry_t *next = NULL;
    entry_t *last = NULL;
    
    bin = ht_hash( hashtable, key );
    
    next = hashtable->table[ bin ];
    
    while( next != NULL && next->key != NULL && strcmp( key, next->key ) > 0 ) {
        last = next;
        next = next->next;
    }
    
    //check if such a pair already exists and if there is a replace
    if( next != NULL && next->key != NULL && strcmp( key, next->key ) == 0 ) {
        
        free( next->value );
        next->value = strdup( value );
        
    //if does not exist a pair then i create a new one
    } else {
        newpair = ht_newpair( key, value );
        
        //top of the list
        if( next == hashtable->table[ bin ] ) {
            newpair->next = next;
            hashtable->table[ bin ] = newpair;
            
            //the end of the list
        } else if ( next == NULL ) {
            last->next = newpair;
            
            //in the medium of the list
        } else  {
            newpair->next = next;
            last->next = newpair;
        }
    }
}

//pair recovery of the hash table
char *ht_get( hashtable_t *hashtable, char *key ) {
    int bin = 0;
    entry_t *pair;
    
    bin = ht_hash( hashtable, key );
    
    //search for the value
    pair = hashtable->table[ bin ];
    while( pair != NULL && pair->key != NULL && strcmp( key, pair->key ) > 0 ) {
        pair = pair->next;
    }
    
    //check if exist
    if( pair == NULL || pair->key == NULL || strcmp( key, pair->key ) != 0 ) {
        return NULL;
        
    } else {
        return pair->value;
    }
    
}

int main( int argc, char **argv ) {
    
    hashtable_t *hashtable = ht_create( 65536 );
    
    ht_set( hashtable, "icsd13098", "12345" );
    ht_set( hashtable, "icsd13036", "111" );
    ht_set( hashtable, "das", "blinky" );
    ht_set( hashtable, "key4", "floyd" );
    
    printf( "%s\n", ht_get( hashtable, "icsd13098" ) );
    printf( "%s\n", ht_get( hashtable, "icsd13036" ) );
    printf( "%s\n", ht_get( hashtable, "das" ) );
    printf( "%s\n", ht_get( hashtable, "key4" ) );
    
    return 0;
}
